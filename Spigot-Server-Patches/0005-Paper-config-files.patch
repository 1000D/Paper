From e67853a430a8c3e37e04b50ecc4108e132f55bc3 Mon Sep 17 00:00:00 2001
From: Zach Brown <zach.brown@destroystokyo.com>
Date: Mon, 29 Feb 2016 21:02:09 -0600
Subject: [PATCH] Paper config files


diff --git a/src/main/java/com/destroystokyo/paper/PaperCommand.java b/src/main/java/com/destroystokyo/paper/PaperCommand.java
new file mode 100644
index 0000000..2fe6fce
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/PaperCommand.java
@@ -0,0 +1,49 @@
+package com.destroystokyo.paper;
+
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.world.WorldServer;
+import org.bukkit.ChatColor;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+
+import java.io.File;
+
+public class PaperCommand extends Command {
+
+    public PaperCommand(String name) {
+        super(name);
+        this.description = "Paper related commands";
+        this.usageMessage = "/paper [reload | version]";
+        this.setPermission("bukkit.command.paper");
+    }
+
+    @Override
+    public boolean execute(CommandSender sender, String commandLabel, String[] args) {
+        if (!testPermission(sender)) return true;
+
+        if (args.length != 1) {
+            sender.sendMessage(ChatColor.RED + "Usage: " + usageMessage);
+            return false;
+        }
+
+        if (args[0].equals("reload")) {
+            Command.broadcastCommandMessage(sender, ChatColor.RED + "Please note that this command is not supported and may cause issues.");
+            Command.broadcastCommandMessage(sender, ChatColor.RED + "If you encounter any issues please use the /stop command to restart your server.");
+
+            MinecraftServer console = MinecraftServer.getServer();
+            com.destroystokyo.paper.PaperConfig.init((File) console.options.valueOf("paper-settings"));
+            for (WorldServer world : console.worlds) {
+                world.paperConfig.init();
+            }
+            console.server.reloadCount++;
+
+            Command.broadcastCommandMessage(sender, ChatColor.GREEN + "Paper config reload complete.");
+        }
+
+        if (args[0].equals("version")) {
+            org.bukkit.Bukkit.getServer().getCommandMap().getCommand("version").execute(sender, commandLabel, new String[0]);
+        }
+
+        return true;
+    }
+}
diff --git a/src/main/java/com/destroystokyo/paper/PaperConfig.java b/src/main/java/com/destroystokyo/paper/PaperConfig.java
new file mode 100644
index 0000000..328ff01
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/PaperConfig.java
@@ -0,0 +1,173 @@
+package com.destroystokyo.paper;
+
+import com.google.common.base.Throwables;
+
+import java.io.File;
+import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.concurrent.TimeUnit;
+import java.util.logging.Level;
+import java.util.regex.Pattern;
+
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.Bukkit;
+import org.bukkit.command.Command;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.YamlConfiguration;
+
+public class PaperConfig {
+
+    private static File CONFIG_FILE;
+    private static final String HEADER = "This is the main configuration file for Paper.\n"
+            + "As you can see, there's tons to configure. Some options may impact gameplay, so use\n"
+            + "with caution, and make sure you know what each option does before configuring.\n"
+            + "\n"
+            + "If you need help with the configuration or have any questions related to Paper,\n"
+            + "join us in our IRC channel.\n"
+            + "\n"
+            + "IRC: #paper @ irc.spi.gt ( http://irc.spi.gt/iris/?channels=paper )\n"
+            + "Wiki: https://paper.readthedocs.org/ \n"
+            + "Paper Forums: https://aquifermc.org/ \n";
+    /*========================================================================*/
+    public static YamlConfiguration config;
+    static int version;
+    static Map<String, Command> commands;
+    private static boolean verbose;
+    /*========================================================================*/
+
+    public static void init(File configFile) {
+        CONFIG_FILE = configFile;
+        config = new YamlConfiguration();
+        try {
+            config.load(CONFIG_FILE);
+        } catch (IOException ex) {
+        } catch (InvalidConfigurationException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not load paper.yml, please correct your syntax errors", ex);
+            throw Throwables.propagate(ex);
+        }
+        config.options().header(HEADER);
+        config.options().copyDefaults(true);
+        verbose = getBoolean("verbose", false);
+
+        commands = new HashMap<String, Command>();
+        commands.put("paper", new PaperCommand("paper"));
+
+        version = getInt("config-version", 12);
+        set("config-version", 12);
+        readConfig(PaperConfig.class, null);
+    }
+
+    protected static void log(String s) {
+        if (verbose) {
+            Bukkit.getLogger().info(s);
+        }
+    }
+
+    public static void registerCommands() {
+        for (Map.Entry<String, Command> entry : commands.entrySet()) {
+            MinecraftServer.getServer().server.getCommandMap().register(entry.getKey(), "Paper", entry.getValue());
+        }
+    }
+
+    static void readConfig(Class<?> clazz, Object instance) {
+        for (Method method : clazz.getDeclaredMethods()) {
+            if (Modifier.isPrivate(method.getModifiers())) {
+                if (method.getParameterTypes().length == 0 && method.getReturnType() == Void.TYPE) {
+                    try {
+                        method.setAccessible(true);
+                        method.invoke(instance);
+                    } catch (InvocationTargetException ex) {
+                        throw Throwables.propagate(ex.getCause());
+                    } catch (Exception ex) {
+                        Bukkit.getLogger().log(Level.SEVERE, "Error invoking " + method, ex);
+                    }
+                }
+            }
+        }
+
+        try {
+            config.save(CONFIG_FILE);
+        } catch (IOException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not save " + CONFIG_FILE, ex);
+        }
+    }
+
+    private static final Pattern SPACE = Pattern.compile(" ");
+    private static final Pattern NOT_NUMERIC = Pattern.compile("[^-\\d.]");
+    public static int getSeconds(String str) {
+        str = SPACE.matcher(str).replaceAll("");
+        final char unit = str.charAt(str.length() - 1);
+        str = NOT_NUMERIC.matcher(str).replaceAll("");
+        double num;
+        try {
+            num = Double.parseDouble(str);
+        } catch (Exception e) {
+            num = 0D;
+        }
+        switch (unit) {
+            case 'd': num *= (double) 60*60*24; break;
+            case 'h': num *= (double) 60*60; break;
+            case 'm': num *= (double) 60; break;
+            default: case 's': break;
+        }
+        return (int) num;
+    }
+
+    protected static String timeSummary(int seconds) {
+        String time = "";
+
+        if (seconds > 60 * 60 * 24) {
+            time += TimeUnit.SECONDS.toDays(seconds) + "d";
+            seconds %= 60 * 60 * 24;
+        }
+
+        if (seconds > 60 * 60) {
+            time += TimeUnit.SECONDS.toHours(seconds) + "h";
+            seconds %= 60 * 60;
+        }
+
+        if (seconds > 0) {
+            time += TimeUnit.SECONDS.toMinutes(seconds) + "m";
+        }
+        return time;
+    }
+
+    private static void set(String path, Object val) {
+        config.set(path, val);
+    }
+
+    private static boolean getBoolean(String path, boolean def) {
+        config.addDefault(path, def);
+        return config.getBoolean(path, config.getBoolean(path));
+    }
+
+    private static double getDouble(String path, double def) {
+        config.addDefault(path, def);
+        return config.getDouble(path, config.getDouble(path));
+    }
+
+    private static float getFloat(String path, float def) {
+        // TODO: Figure out why getFloat() always returns the default value.
+        return (float) getDouble(path, (double) def);
+    }
+
+    private static int getInt(String path, int def) {
+        config.addDefault(path, def);
+        return config.getInt(path, config.getInt(path));
+    }
+
+    private static <T> List getList(String path, T def) {
+        config.addDefault(path, def);
+        return (List<T>) config.getList(path, config.getList(path));
+    }
+
+    private static String getString(String path, String def) {
+        config.addDefault(path, def);
+        return config.getString(path, config.getString(path));
+    }
+}
diff --git a/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java b/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
new file mode 100644
index 0000000..1d59136
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
@@ -0,0 +1,65 @@
+package com.destroystokyo.paper;
+
+import org.bukkit.configuration.file.YamlConfiguration;
+import org.spigotmc.SpigotWorldConfig;
+
+import java.util.List;
+
+import static com.destroystokyo.paper.PaperConfig.log;
+
+public class PaperWorldConfig {
+
+    private final String worldName;
+    private final SpigotWorldConfig spigotConfig;
+    private final YamlConfiguration config;
+    private boolean verbose;
+
+    public PaperWorldConfig(String worldName, SpigotWorldConfig spigotConfig) {
+        this.worldName = worldName;
+        this.spigotConfig = spigotConfig;
+        this.config = PaperConfig.config;
+        init();
+    }
+
+    public void init() {
+        log("-------- World Settings For [" + worldName + "] --------");
+        PaperConfig.readConfig(PaperWorldConfig.class, this);
+    }
+
+    private void set(String path, Object val) {
+        config.set("world-settings.default." + path, val);
+        if (config.get("world-settings." + worldName + "." + path) != null) {
+            config.set("world-settings." + worldName + "." + path, val);
+        }
+    }
+
+    private boolean getBoolean(String path, boolean def) {
+        config.addDefault("world-settings.default." + path, def);
+        return config.getBoolean("world-settings." + worldName + "." + path, config.getBoolean("world-settings.default." + path));
+    }
+
+    private double getDouble(String path, double def) {
+        config.addDefault("world-settings.default." + path, def);
+        return config.getDouble("world-settings." + worldName + "." + path, config.getDouble("world-settings.default." + path));
+    }
+
+    private int getInt(String path, int def) {
+        config.addDefault("world-settings.default." + path, def);
+        return config.getInt("world-settings." + worldName + "." + path, config.getInt("world-settings.default." + path));
+    }
+
+    private float getFloat(String path, float def) {
+        // TODO: Figure out why getFloat() always returns the default value.
+        return (float) getDouble(path, (double) def);
+    }
+
+    private <T> List getList(String path, T def) {
+        config.addDefault("world-settings.default." + path, def);
+        return (List<T>) config.getList("world-settings." + worldName + "." + path, config.getList("world-settings.default." + path));
+    }
+
+    private String getString(String path, String def) {
+        config.addDefault("world-settings.default." + path, def);
+        return config.getString("world-settings." + worldName + "." + path, config.getString("world-settings.default." + path));
+    }
+}
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index 040d8d2..de25421 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -206,6 +206,10 @@ public class DedicatedServer extends MinecraftServer implements IServer {
             this.setPlayerList(new DedicatedPlayerList(this));
             SpigotConfig.init((File)this.options.valueOf("spigot-settings"));
             SpigotConfig.registerCommands();
+            // Paper start
+            com.destroystokyo.paper.PaperConfig.init((File) options.valueOf("paper-settings"));
+            com.destroystokyo.paper.PaperConfig.registerCommands();
+            // Paper end
             LOGGER.info("Generating keypair");
             this.setKeyPair(CryptManager.generateKeyPair());
             LOGGER.info("Starting Minecraft server on {}:{}", new Object[] {this.getServerHostname().isEmpty() ? "*" : this.getServerHostname(), Integer.valueOf(this.getServerPort())});
diff --git a/src/main/java/net/minecraft/world/World.java b/src/main/java/net/minecraft/world/World.java
index 282c656..d5cb232 100644
--- a/src/main/java/net/minecraft/world/World.java
+++ b/src/main/java/net/minecraft/world/World.java
@@ -203,6 +203,9 @@ public abstract class World implements IBlockAccess {
     public boolean populating;
     private int tickPosition;
     public final SpigotWorldConfig spigotConfig;
+
+    public final com.destroystokyo.paper.PaperWorldConfig paperConfig; // Paper
+
     public final SpigotTimings.WorldTimingsHandler timings;
     private boolean guardEntityList;
     public static boolean haveWeSilencedAPhysicsCrash;
@@ -226,6 +229,7 @@ public abstract class World implements IBlockAccess {
 
     protected World(ISaveHandler p_i76_1_, WorldInfo p_i76_2_, WorldProvider p_i76_3_, Profiler p_i76_4_, boolean p_i76_5_, ChunkGenerator p_i76_6_, Environment p_i76_7_) {
         this.spigotConfig = new SpigotWorldConfig(p_i76_2_.getWorldName());
+        this.paperConfig = new com.destroystokyo.paper.PaperWorldConfig(p_i76_2_.getWorldName(), this.spigotConfig); // Paper
         this.generator = p_i76_6_;
         this.world = new CraftWorld((WorldServer)this, p_i76_6_, p_i76_7_);
         this.ticksPerAnimalSpawns = (long)this.getServer().getTicksPerAnimalSpawns();
@@ -2521,7 +2525,7 @@ public abstract class World implements IBlockAccess {
 
     /**
      * Runs through the list of updates to run and ticks them
-     *  
+     *
      * @param runAllPending If true, all (up to 65536) pending scheduled tick entries will be run this tick. If false,
      * scheduled tick entries will not be run until the time they are scheduled to tick has arrived. Only called with
      * false.
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index a5d6a09..b58eeb1 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -713,6 +713,7 @@ public final class CraftServer implements Server {
         }
 
         SpigotConfig.init((File)this.console.options.valueOf("spigot-settings"));
+        com.destroystokyo.paper.PaperConfig.init((File) console.options.valueOf("paper-settings")); // Paper
 
         for (WorldServer world : this.console.worlds) {
             world.worldInfo.setDifficulty(difficulty);
@@ -731,12 +732,15 @@ public final class CraftServer implements Server {
             }
 
             world.spigotConfig.init();
+            world.paperConfig.init(); // Paper
         }
 
         this.pluginManager.clearPlugins();
         this.commandMap.clearCommands();
         this.resetRecipes();
         SpigotConfig.registerCommands();
+        com.destroystokyo.paper.PaperConfig.registerCommands(); // Paper
+
         this.overrideAllCommandBlockCommands = this.commandsConfiguration.getStringList("command-block-overrides").contains("*");
 
         for (int pollCount = 0; pollCount < 50 && this.getScheduler().getActiveWorkers().size() > 0; ++pollCount) {
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index 65ab176..dacd759 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -42,12 +42,27 @@ public class Main {
                 this.acceptsAll(Arrays.asList(new String[] {"log-append"}), "Whether to append to the log file").withRequiredArg().ofType(Boolean.class).defaultsTo(Boolean.valueOf(true), new Boolean[0]).describedAs("Log append");
                 this.acceptsAll(Arrays.asList(new String[] {"log-strip-color"}), "Strips color codes from log file");
                 this.acceptsAll(Arrays.asList(new String[] {"b", "bukkit-settings"}), "File for bukkit settings").withRequiredArg().ofType(File.class).defaultsTo(new File("bukkit.yml"), new File[0]).describedAs("Yml file");
+                // Paper start
+                acceptsAll(asList("paper", "paper-settings"), "File for paper settings")
+                    .withRequiredArg()
+                    .ofType(File.class)
+                    .defaultsTo(new File("paper.yml"))
+                    .describedAs("Yml file");
+                // Paper end
                 this.acceptsAll(Arrays.asList(new String[] {"C", "commands-settings"}), "File for command settings").withRequiredArg().ofType(File.class).defaultsTo(new File("commands.yml"), new File[0]).describedAs("Yml file");
                 this.acceptsAll(Arrays.asList(new String[] {"nojline"}), "Disables jline and emulates the vanilla console");
                 this.acceptsAll(Arrays.asList(new String[] {"noconsole"}), "Disables the console");
                 this.acceptsAll(Arrays.asList(new String[] {"v", "version"}), "Show the CraftBukkit Version");
                 this.acceptsAll(Arrays.asList(new String[] {"demo"}), "Demo mode");
                 this.acceptsAll(Arrays.asList(new String[] {"S", "spigot-settings"}), "File for spigot settings").withRequiredArg().ofType(File.class).defaultsTo(new File("spigot.yml"), new File[0]).describedAs("Yml file");
+
+                // Paper Start
+                acceptsAll(asList("paper", "paper-settings"), "File for paper settings")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File("paper.yml"))
+                        .describedAs("Yml file");
+                // Paper end
             }
         };
         OptionSet options = null;
diff --git a/src/main/java/org/spigotmc/SpigotWorldConfig.java b/src/main/java/org/spigotmc/SpigotWorldConfig.java
index e5c5d88..a21a465 100644
--- a/src/main/java/org/spigotmc/SpigotWorldConfig.java
+++ b/src/main/java/org/spigotmc/SpigotWorldConfig.java
@@ -82,27 +82,27 @@ public class SpigotWorldConfig {
         this.config.set("world-settings.default." + path, val);
     }
 
-    private boolean getBoolean(String path, boolean def) {
+    public boolean getBoolean(String path, boolean def) {
         this.config.addDefault("world-settings.default." + path, Boolean.valueOf(def));
         return this.config.getBoolean("world-settings." + this.worldName + "." + path, this.config.getBoolean("world-settings.default." + path));
     }
 
-    private double getDouble(String path, double def) {
+    public double getDouble(String path, double def) {
         this.config.addDefault("world-settings.default." + path, Double.valueOf(def));
         return this.config.getDouble("world-settings." + this.worldName + "." + path, this.config.getDouble("world-settings.default." + path));
     }
 
-    private int getInt(String path, int def) {
+    public int getInt(String path, int def) {
         this.config.addDefault("world-settings.default." + path, Integer.valueOf(def));
         return this.config.getInt("world-settings." + this.worldName + "." + path, this.config.getInt("world-settings.default." + path));
     }
 
-    private <T> List getList(String path, T def) {
+    public <T> List getList(String path, T def) {
         this.config.addDefault("world-settings.default." + path, def);
         return this.config.getList("world-settings." + this.worldName + "." + path, this.config.getList("world-settings.default." + path));
     }
 
-    private String getString(String path, String def) {
+    public String getString(String path, String def) {
         this.config.addDefault("world-settings.default." + path, def);
         return this.config.getString("world-settings." + this.worldName + "." + path, this.config.getString("world-settings.default." + path));
     }
-- 
2.12.1.windows.1

